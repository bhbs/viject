// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`createViteConfig > all: false 1`] = `
"import { resolve } from \\"node:path\\";
import { readFileSync } from \\"node:fs\\";
import { defineConfig, loadEnv } from \\"vite\\";
import react from \\"@vitejs/plugin-react\\";
// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
    setEnv(mode);
    return {
        plugins: [
            react(),
            envPlugin(),
            devServerPlugin(),
            sourcemapPlugin(),
            buildPathPlugin(),
            basePlugin(),
            importPrefixPlugin(),
            htmlPlugin(mode),
        ],
    };
});
function setEnv(mode) {
    Object.assign(process.env, loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]));
    process.env.NODE_ENV ||= mode;
    const { homepage } = JSON.parse(readFileSync(\\"package.json\\", \\"utf-8\\"));
    process.env.PUBLIC_URL ||= homepage
        ? \`\${homepage.startsWith(\\"http\\") || homepage.startsWith(\\"/\\")
            ? homepage
            : \`/\${homepage}\`}\`.replace(/\\\\/$/, \\"\\")
        : \\"\\";
}
// Expose \`process.env\` environment variables to your client code
// https://vitejs.dev/config/shared-options.html#define
function envPlugin() {
    return {
        name: \\"env-plugin\\",
        config(_, { mode }) {
            const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
            return {
                define: Object.fromEntries(Object.entries(env).map(([key, value]) => [
                    \`process.env.\${key}\`,
                    JSON.stringify(value),
                ])),
            };
        },
    };
}
// https://vitejs.dev/config/server-options.html#server-https
function devServerPlugin() {
    return {
        name: \\"dev-server-plugin\\",
        config(_, { mode }) {
            const { HOST, PORT, HTTPS, SSL_CRT_FILE, SSL_KEY_FILE } = loadEnv(mode, \\".\\", [\\"HOST\\", \\"PORT\\", \\"HTTPS\\", \\"SSL_CRT_FILE\\", \\"SSL_KEY_FILE\\"]);
            const https = HTTPS === \\"true\\";
            return {
                server: {
                    host: HOST || \\"localhost\\",
                    port: parseInt(PORT || \\"3000\\", 10),
                    open: true,
                    https: https && SSL_CRT_FILE && SSL_KEY_FILE
                        ? {
                            cert: readFileSync(resolve(SSL_CRT_FILE)),
                            key: readFileSync(resolve(SSL_KEY_FILE)),
                        }
                        : https,
                },
            };
        },
    };
}
// https://vitejs.dev/config/build-options.html#build-sourcemap
function sourcemapPlugin() {
    return {
        name: \\"sourcemap-plugin\\",
        config(_, { mode }) {
            const { GENERATE_SOURCEMAP } = loadEnv(mode, \\".\\", [
                \\"GENERATE_SOURCEMAP\\",
            ]);
            return {
                build: {
                    sourcemap: GENERATE_SOURCEMAP === \\"true\\",
                },
            };
        },
    };
}
// https://vitejs.dev/config/build-options.html#build-outdir
function buildPathPlugin() {
    return {
        name: \\"build-path-plugin\\",
        config(_, { mode }) {
            const { BUILD_PATH } = loadEnv(mode, \\".\\", [
                \\"BUILD_PATH\\",
            ]);
            return {
                build: {
                    outDir: BUILD_PATH || \\"build\\",
                },
            };
        },
    };
}
// https://vitejs.dev/config/shared-options.html#base
function basePlugin() {
    return {
        name: \\"base-plugin\\",
        config(_, { mode }) {
            const { PUBLIC_URL } = loadEnv(mode, \\".\\", [\\"PUBLIC_URL\\"]);
            return {
                base: PUBLIC_URL || \\"\\",
            };
        },
    };
}
// To resolve modules from node_modules, you can prefix paths with ~
// https://create-react-app.dev/docs/adding-a-sass-stylesheet
// https://vitejs.dev/config/shared-options.html#resolve-alias
function importPrefixPlugin() {
    return {
        name: \\"import-prefix-plugin\\",
        config() {
            return {
                resolve: {
                    alias: [{ find: /^~([^/])/, replacement: \\"$1\\" }],
                },
            };
        },
    };
}
// Replace %ENV_VARIABLES% in index.html
// https://vitejs.dev/guide/api-plugin.html#transformindexhtml
function htmlPlugin(mode) {
    const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
    return {
        name: \\"html-transform\\",
        transformIndexHtml: {
            enforce: \\"pre\\",
            transform(html) {
                return html.replace(/%(.*?)%/g, (match, p1) => env[p1] ?? match);
            },
        },
    };
}
"
`;

exports[`createViteConfig > jsConfig: true 1`] = `
"import { resolve } from \\"node:path\\";
import { readFileSync } from \\"node:fs\\";
import { defineConfig, loadEnv } from \\"vite\\";
import react from \\"@vitejs/plugin-react\\";
import tsconfigPaths from \\"vite-tsconfig-paths\\";
// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
    setEnv(mode);
    return {
        plugins: [
            react(),
            tsconfigPaths(),
            envPlugin(),
            devServerPlugin(),
            sourcemapPlugin(),
            buildPathPlugin(),
            basePlugin(),
            importPrefixPlugin(),
            htmlPlugin(mode),
        ],
    };
});
function setEnv(mode) {
    Object.assign(process.env, loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]));
    process.env.NODE_ENV ||= mode;
    const { homepage } = JSON.parse(readFileSync(\\"package.json\\", \\"utf-8\\"));
    process.env.PUBLIC_URL ||= homepage
        ? \`\${homepage.startsWith(\\"http\\") || homepage.startsWith(\\"/\\")
            ? homepage
            : \`/\${homepage}\`}\`.replace(/\\\\/$/, \\"\\")
        : \\"\\";
}
// Expose \`process.env\` environment variables to your client code
// https://vitejs.dev/config/shared-options.html#define
function envPlugin() {
    return {
        name: \\"env-plugin\\",
        config(_, { mode }) {
            const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
            return {
                define: Object.fromEntries(Object.entries(env).map(([key, value]) => [
                    \`process.env.\${key}\`,
                    JSON.stringify(value),
                ])),
            };
        },
    };
}
// https://vitejs.dev/config/server-options.html#server-https
function devServerPlugin() {
    return {
        name: \\"dev-server-plugin\\",
        config(_, { mode }) {
            const { HOST, PORT, HTTPS, SSL_CRT_FILE, SSL_KEY_FILE } = loadEnv(mode, \\".\\", [\\"HOST\\", \\"PORT\\", \\"HTTPS\\", \\"SSL_CRT_FILE\\", \\"SSL_KEY_FILE\\"]);
            const https = HTTPS === \\"true\\";
            return {
                server: {
                    host: HOST || \\"localhost\\",
                    port: parseInt(PORT || \\"3000\\", 10),
                    open: true,
                    https: https && SSL_CRT_FILE && SSL_KEY_FILE
                        ? {
                            cert: readFileSync(resolve(SSL_CRT_FILE)),
                            key: readFileSync(resolve(SSL_KEY_FILE)),
                        }
                        : https,
                },
            };
        },
    };
}
// https://vitejs.dev/config/build-options.html#build-sourcemap
function sourcemapPlugin() {
    return {
        name: \\"sourcemap-plugin\\",
        config(_, { mode }) {
            const { GENERATE_SOURCEMAP } = loadEnv(mode, \\".\\", [
                \\"GENERATE_SOURCEMAP\\",
            ]);
            return {
                build: {
                    sourcemap: GENERATE_SOURCEMAP === \\"true\\",
                },
            };
        },
    };
}
// https://vitejs.dev/config/build-options.html#build-outdir
function buildPathPlugin() {
    return {
        name: \\"build-path-plugin\\",
        config(_, { mode }) {
            const { BUILD_PATH } = loadEnv(mode, \\".\\", [
                \\"BUILD_PATH\\",
            ]);
            return {
                build: {
                    outDir: BUILD_PATH || \\"build\\",
                },
            };
        },
    };
}
// https://vitejs.dev/config/shared-options.html#base
function basePlugin() {
    return {
        name: \\"base-plugin\\",
        config(_, { mode }) {
            const { PUBLIC_URL } = loadEnv(mode, \\".\\", [\\"PUBLIC_URL\\"]);
            return {
                base: PUBLIC_URL || \\"\\",
            };
        },
    };
}
// To resolve modules from node_modules, you can prefix paths with ~
// https://create-react-app.dev/docs/adding-a-sass-stylesheet
// https://vitejs.dev/config/shared-options.html#resolve-alias
function importPrefixPlugin() {
    return {
        name: \\"import-prefix-plugin\\",
        config() {
            return {
                resolve: {
                    alias: [{ find: /^~([^/])/, replacement: \\"$1\\" }],
                },
            };
        },
    };
}
// Replace %ENV_VARIABLES% in index.html
// https://vitejs.dev/guide/api-plugin.html#transformindexhtml
function htmlPlugin(mode) {
    const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
    return {
        name: \\"html-transform\\",
        transformIndexHtml: {
            enforce: \\"pre\\",
            transform(html) {
                return html.replace(/%(.*?)%/g, (match, p1) => env[p1] ?? match);
            },
        },
    };
}
"
`;

exports[`createViteConfig > setupProxy: true 1`] = `
"import { resolve } from \\"node:path\\";
import { readFileSync } from \\"node:fs\\";
import { defineConfig, loadEnv } from \\"vite\\";
import react from \\"@vitejs/plugin-react\\";
import setupProxy from \\"./src/setupProxy\\";
// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
    setEnv(mode);
    return {
        plugins: [
            react(),
            envPlugin(),
            devServerPlugin(),
            sourcemapPlugin(),
            buildPathPlugin(),
            basePlugin(),
            importPrefixPlugin(),
            htmlPlugin(mode),
            setupProxyPlugin(),
        ],
    };
});
function setEnv(mode) {
    Object.assign(process.env, loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]));
    process.env.NODE_ENV ||= mode;
    const { homepage } = JSON.parse(readFileSync(\\"package.json\\", \\"utf-8\\"));
    process.env.PUBLIC_URL ||= homepage
        ? \`\${homepage.startsWith(\\"http\\") || homepage.startsWith(\\"/\\")
            ? homepage
            : \`/\${homepage}\`}\`.replace(/\\\\/$/, \\"\\")
        : \\"\\";
}
// Expose \`process.env\` environment variables to your client code
// https://vitejs.dev/config/shared-options.html#define
function envPlugin() {
    return {
        name: \\"env-plugin\\",
        config(_, { mode }) {
            const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
            return {
                define: Object.fromEntries(Object.entries(env).map(([key, value]) => [
                    \`process.env.\${key}\`,
                    JSON.stringify(value),
                ])),
            };
        },
    };
}
// https://vitejs.dev/config/server-options.html#server-https
function devServerPlugin() {
    return {
        name: \\"dev-server-plugin\\",
        config(_, { mode }) {
            const { HOST, PORT, HTTPS, SSL_CRT_FILE, SSL_KEY_FILE } = loadEnv(mode, \\".\\", [\\"HOST\\", \\"PORT\\", \\"HTTPS\\", \\"SSL_CRT_FILE\\", \\"SSL_KEY_FILE\\"]);
            const https = HTTPS === \\"true\\";
            return {
                server: {
                    host: HOST || \\"localhost\\",
                    port: parseInt(PORT || \\"3000\\", 10),
                    open: true,
                    https: https && SSL_CRT_FILE && SSL_KEY_FILE
                        ? {
                            cert: readFileSync(resolve(SSL_CRT_FILE)),
                            key: readFileSync(resolve(SSL_KEY_FILE)),
                        }
                        : https,
                },
            };
        },
    };
}
// https://vitejs.dev/config/build-options.html#build-sourcemap
function sourcemapPlugin() {
    return {
        name: \\"sourcemap-plugin\\",
        config(_, { mode }) {
            const { GENERATE_SOURCEMAP } = loadEnv(mode, \\".\\", [
                \\"GENERATE_SOURCEMAP\\",
            ]);
            return {
                build: {
                    sourcemap: GENERATE_SOURCEMAP === \\"true\\",
                },
            };
        },
    };
}
// https://vitejs.dev/config/build-options.html#build-outdir
function buildPathPlugin() {
    return {
        name: \\"build-path-plugin\\",
        config(_, { mode }) {
            const { BUILD_PATH } = loadEnv(mode, \\".\\", [
                \\"BUILD_PATH\\",
            ]);
            return {
                build: {
                    outDir: BUILD_PATH || \\"build\\",
                },
            };
        },
    };
}
// https://vitejs.dev/config/shared-options.html#base
function basePlugin() {
    return {
        name: \\"base-plugin\\",
        config(_, { mode }) {
            const { PUBLIC_URL } = loadEnv(mode, \\".\\", [\\"PUBLIC_URL\\"]);
            return {
                base: PUBLIC_URL || \\"\\",
            };
        },
    };
}
// To resolve modules from node_modules, you can prefix paths with ~
// https://create-react-app.dev/docs/adding-a-sass-stylesheet
// https://vitejs.dev/config/shared-options.html#resolve-alias
function importPrefixPlugin() {
    return {
        name: \\"import-prefix-plugin\\",
        config() {
            return {
                resolve: {
                    alias: [{ find: /^~([^/])/, replacement: \\"$1\\" }],
                },
            };
        },
    };
}
// Configuring the Proxy Manually
// https://create-react-app.dev/docs/proxying-api-requests-in-development/#configuring-the-proxy-manually
// https://vitejs.dev/guide/api-plugin.html#configureserver
function setupProxyPlugin() {
    return {
        name: \\"configure-server\\",
        config() {
            return {
                server: { proxy: {} },
            };
        },
        configureServer(server) {
            setupProxy(server.middlewares);
        },
    };
}
// Replace %ENV_VARIABLES% in index.html
// https://vitejs.dev/guide/api-plugin.html#transformindexhtml
function htmlPlugin(mode) {
    const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
    return {
        name: \\"html-transform\\",
        transformIndexHtml: {
            enforce: \\"pre\\",
            transform(html) {
                return html.replace(/%(.*?)%/g, (match, p1) => env[p1] ?? match);
            },
        },
    };
}
"
`;

exports[`createViteConfig > setupTestsJs: true 1`] = `
"import { resolve } from \\"node:path\\";
import { readFileSync } from \\"node:fs\\";
import { defineConfig, loadEnv } from \\"vite\\";
import react from \\"@vitejs/plugin-react\\";
// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
    setEnv(mode);
    return {
        plugins: [
            react(),
            envPlugin(),
            devServerPlugin(),
            sourcemapPlugin(),
            buildPathPlugin(),
            basePlugin(),
            importPrefixPlugin(),
            htmlPlugin(mode),
        ],
    };
});
function setEnv(mode) {
    Object.assign(process.env, loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]));
    process.env.NODE_ENV ||= mode;
    const { homepage } = JSON.parse(readFileSync(\\"package.json\\", \\"utf-8\\"));
    process.env.PUBLIC_URL ||= homepage
        ? \`\${homepage.startsWith(\\"http\\") || homepage.startsWith(\\"/\\")
            ? homepage
            : \`/\${homepage}\`}\`.replace(/\\\\/$/, \\"\\")
        : \\"\\";
}
// Expose \`process.env\` environment variables to your client code
// https://vitejs.dev/config/shared-options.html#define
function envPlugin() {
    return {
        name: \\"env-plugin\\",
        config(_, { mode }) {
            const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
            return {
                define: Object.fromEntries(Object.entries(env).map(([key, value]) => [
                    \`process.env.\${key}\`,
                    JSON.stringify(value),
                ])),
            };
        },
    };
}
// https://vitejs.dev/config/server-options.html#server-https
function devServerPlugin() {
    return {
        name: \\"dev-server-plugin\\",
        config(_, { mode }) {
            const { HOST, PORT, HTTPS, SSL_CRT_FILE, SSL_KEY_FILE } = loadEnv(mode, \\".\\", [\\"HOST\\", \\"PORT\\", \\"HTTPS\\", \\"SSL_CRT_FILE\\", \\"SSL_KEY_FILE\\"]);
            const https = HTTPS === \\"true\\";
            return {
                server: {
                    host: HOST || \\"localhost\\",
                    port: parseInt(PORT || \\"3000\\", 10),
                    open: true,
                    https: https && SSL_CRT_FILE && SSL_KEY_FILE
                        ? {
                            cert: readFileSync(resolve(SSL_CRT_FILE)),
                            key: readFileSync(resolve(SSL_KEY_FILE)),
                        }
                        : https,
                },
            };
        },
    };
}
// https://vitejs.dev/config/build-options.html#build-sourcemap
function sourcemapPlugin() {
    return {
        name: \\"sourcemap-plugin\\",
        config(_, { mode }) {
            const { GENERATE_SOURCEMAP } = loadEnv(mode, \\".\\", [
                \\"GENERATE_SOURCEMAP\\",
            ]);
            return {
                build: {
                    sourcemap: GENERATE_SOURCEMAP === \\"true\\",
                },
            };
        },
    };
}
// https://vitejs.dev/config/build-options.html#build-outdir
function buildPathPlugin() {
    return {
        name: \\"build-path-plugin\\",
        config(_, { mode }) {
            const { BUILD_PATH } = loadEnv(mode, \\".\\", [
                \\"BUILD_PATH\\",
            ]);
            return {
                build: {
                    outDir: BUILD_PATH || \\"build\\",
                },
            };
        },
    };
}
// https://vitejs.dev/config/shared-options.html#base
function basePlugin() {
    return {
        name: \\"base-plugin\\",
        config(_, { mode }) {
            const { PUBLIC_URL } = loadEnv(mode, \\".\\", [\\"PUBLIC_URL\\"]);
            return {
                base: PUBLIC_URL || \\"\\",
            };
        },
    };
}
// To resolve modules from node_modules, you can prefix paths with ~
// https://create-react-app.dev/docs/adding-a-sass-stylesheet
// https://vitejs.dev/config/shared-options.html#resolve-alias
function importPrefixPlugin() {
    return {
        name: \\"import-prefix-plugin\\",
        config() {
            return {
                resolve: {
                    alias: [{ find: /^~([^/])/, replacement: \\"$1\\" }],
                },
            };
        },
    };
}
// Replace %ENV_VARIABLES% in index.html
// https://vitejs.dev/guide/api-plugin.html#transformindexhtml
function htmlPlugin(mode) {
    const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
    return {
        name: \\"html-transform\\",
        transformIndexHtml: {
            enforce: \\"pre\\",
            transform(html) {
                return html.replace(/%(.*?)%/g, (match, p1) => env[p1] ?? match);
            },
        },
    };
}
"
`;

exports[`createViteConfig > setupTestsTs: true 1`] = `
"import { resolve } from \\"node:path\\";
import { readFileSync } from \\"node:fs\\";
import { defineConfig, loadEnv } from \\"vite\\";
import react from \\"@vitejs/plugin-react\\";
// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
    setEnv(mode);
    return {
        plugins: [
            react(),
            envPlugin(),
            devServerPlugin(),
            sourcemapPlugin(),
            buildPathPlugin(),
            basePlugin(),
            importPrefixPlugin(),
            htmlPlugin(mode),
        ],
    };
});
function setEnv(mode) {
    Object.assign(process.env, loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]));
    process.env.NODE_ENV ||= mode;
    const { homepage } = JSON.parse(readFileSync(\\"package.json\\", \\"utf-8\\"));
    process.env.PUBLIC_URL ||= homepage
        ? \`\${homepage.startsWith(\\"http\\") || homepage.startsWith(\\"/\\")
            ? homepage
            : \`/\${homepage}\`}\`.replace(/\\\\/$/, \\"\\")
        : \\"\\";
}
// Expose \`process.env\` environment variables to your client code
// https://vitejs.dev/config/shared-options.html#define
function envPlugin() {
    return {
        name: \\"env-plugin\\",
        config(_, { mode }) {
            const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
            return {
                define: Object.fromEntries(Object.entries(env).map(([key, value]) => [
                    \`process.env.\${key}\`,
                    JSON.stringify(value),
                ])),
            };
        },
    };
}
// https://vitejs.dev/config/server-options.html#server-https
function devServerPlugin() {
    return {
        name: \\"dev-server-plugin\\",
        config(_, { mode }) {
            const { HOST, PORT, HTTPS, SSL_CRT_FILE, SSL_KEY_FILE } = loadEnv(mode, \\".\\", [\\"HOST\\", \\"PORT\\", \\"HTTPS\\", \\"SSL_CRT_FILE\\", \\"SSL_KEY_FILE\\"]);
            const https = HTTPS === \\"true\\";
            return {
                server: {
                    host: HOST || \\"localhost\\",
                    port: parseInt(PORT || \\"3000\\", 10),
                    open: true,
                    https: https && SSL_CRT_FILE && SSL_KEY_FILE
                        ? {
                            cert: readFileSync(resolve(SSL_CRT_FILE)),
                            key: readFileSync(resolve(SSL_KEY_FILE)),
                        }
                        : https,
                },
            };
        },
    };
}
// https://vitejs.dev/config/build-options.html#build-sourcemap
function sourcemapPlugin() {
    return {
        name: \\"sourcemap-plugin\\",
        config(_, { mode }) {
            const { GENERATE_SOURCEMAP } = loadEnv(mode, \\".\\", [
                \\"GENERATE_SOURCEMAP\\",
            ]);
            return {
                build: {
                    sourcemap: GENERATE_SOURCEMAP === \\"true\\",
                },
            };
        },
    };
}
// https://vitejs.dev/config/build-options.html#build-outdir
function buildPathPlugin() {
    return {
        name: \\"build-path-plugin\\",
        config(_, { mode }) {
            const { BUILD_PATH } = loadEnv(mode, \\".\\", [
                \\"BUILD_PATH\\",
            ]);
            return {
                build: {
                    outDir: BUILD_PATH || \\"build\\",
                },
            };
        },
    };
}
// https://vitejs.dev/config/shared-options.html#base
function basePlugin() {
    return {
        name: \\"base-plugin\\",
        config(_, { mode }) {
            const { PUBLIC_URL } = loadEnv(mode, \\".\\", [\\"PUBLIC_URL\\"]);
            return {
                base: PUBLIC_URL || \\"\\",
            };
        },
    };
}
// To resolve modules from node_modules, you can prefix paths with ~
// https://create-react-app.dev/docs/adding-a-sass-stylesheet
// https://vitejs.dev/config/shared-options.html#resolve-alias
function importPrefixPlugin() {
    return {
        name: \\"import-prefix-plugin\\",
        config() {
            return {
                resolve: {
                    alias: [{ find: /^~([^/])/, replacement: \\"$1\\" }],
                },
            };
        },
    };
}
// Replace %ENV_VARIABLES% in index.html
// https://vitejs.dev/guide/api-plugin.html#transformindexhtml
function htmlPlugin(mode) {
    const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
    return {
        name: \\"html-transform\\",
        transformIndexHtml: {
            enforce: \\"pre\\",
            transform(html) {
                return html.replace(/%(.*?)%/g, (match, p1) => env[p1] ?? match);
            },
        },
    };
}
"
`;

exports[`createViteConfig > svg: true 1`] = `
"import { resolve } from \\"node:path\\";
import { readFileSync } from \\"node:fs\\";
import { defineConfig, loadEnv } from \\"vite\\";
import react from \\"@vitejs/plugin-react\\";
import svgr from \\"vite-plugin-svgr\\";
// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
    setEnv(mode);
    return {
        plugins: [
            react(),
            svgr(),
            envPlugin(),
            devServerPlugin(),
            sourcemapPlugin(),
            buildPathPlugin(),
            basePlugin(),
            importPrefixPlugin(),
            htmlPlugin(mode),
        ],
    };
});
function setEnv(mode) {
    Object.assign(process.env, loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]));
    process.env.NODE_ENV ||= mode;
    const { homepage } = JSON.parse(readFileSync(\\"package.json\\", \\"utf-8\\"));
    process.env.PUBLIC_URL ||= homepage
        ? \`\${homepage.startsWith(\\"http\\") || homepage.startsWith(\\"/\\")
            ? homepage
            : \`/\${homepage}\`}\`.replace(/\\\\/$/, \\"\\")
        : \\"\\";
}
// Expose \`process.env\` environment variables to your client code
// https://vitejs.dev/config/shared-options.html#define
function envPlugin() {
    return {
        name: \\"env-plugin\\",
        config(_, { mode }) {
            const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
            return {
                define: Object.fromEntries(Object.entries(env).map(([key, value]) => [
                    \`process.env.\${key}\`,
                    JSON.stringify(value),
                ])),
            };
        },
    };
}
// https://vitejs.dev/config/server-options.html#server-https
function devServerPlugin() {
    return {
        name: \\"dev-server-plugin\\",
        config(_, { mode }) {
            const { HOST, PORT, HTTPS, SSL_CRT_FILE, SSL_KEY_FILE } = loadEnv(mode, \\".\\", [\\"HOST\\", \\"PORT\\", \\"HTTPS\\", \\"SSL_CRT_FILE\\", \\"SSL_KEY_FILE\\"]);
            const https = HTTPS === \\"true\\";
            return {
                server: {
                    host: HOST || \\"localhost\\",
                    port: parseInt(PORT || \\"3000\\", 10),
                    open: true,
                    https: https && SSL_CRT_FILE && SSL_KEY_FILE
                        ? {
                            cert: readFileSync(resolve(SSL_CRT_FILE)),
                            key: readFileSync(resolve(SSL_KEY_FILE)),
                        }
                        : https,
                },
            };
        },
    };
}
// https://vitejs.dev/config/build-options.html#build-sourcemap
function sourcemapPlugin() {
    return {
        name: \\"sourcemap-plugin\\",
        config(_, { mode }) {
            const { GENERATE_SOURCEMAP } = loadEnv(mode, \\".\\", [
                \\"GENERATE_SOURCEMAP\\",
            ]);
            return {
                build: {
                    sourcemap: GENERATE_SOURCEMAP === \\"true\\",
                },
            };
        },
    };
}
// https://vitejs.dev/config/build-options.html#build-outdir
function buildPathPlugin() {
    return {
        name: \\"build-path-plugin\\",
        config(_, { mode }) {
            const { BUILD_PATH } = loadEnv(mode, \\".\\", [
                \\"BUILD_PATH\\",
            ]);
            return {
                build: {
                    outDir: BUILD_PATH || \\"build\\",
                },
            };
        },
    };
}
// https://vitejs.dev/config/shared-options.html#base
function basePlugin() {
    return {
        name: \\"base-plugin\\",
        config(_, { mode }) {
            const { PUBLIC_URL } = loadEnv(mode, \\".\\", [\\"PUBLIC_URL\\"]);
            return {
                base: PUBLIC_URL || \\"\\",
            };
        },
    };
}
// To resolve modules from node_modules, you can prefix paths with ~
// https://create-react-app.dev/docs/adding-a-sass-stylesheet
// https://vitejs.dev/config/shared-options.html#resolve-alias
function importPrefixPlugin() {
    return {
        name: \\"import-prefix-plugin\\",
        config() {
            return {
                resolve: {
                    alias: [{ find: /^~([^/])/, replacement: \\"$1\\" }],
                },
            };
        },
    };
}
// Replace %ENV_VARIABLES% in index.html
// https://vitejs.dev/guide/api-plugin.html#transformindexhtml
function htmlPlugin(mode) {
    const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
    return {
        name: \\"html-transform\\",
        transformIndexHtml: {
            enforce: \\"pre\\",
            transform(html) {
                return html.replace(/%(.*?)%/g, (match, p1) => env[p1] ?? match);
            },
        },
    };
}
"
`;

exports[`createViteConfig > tsConfig: true 1`] = `
"import { resolve } from \\"node:path\\";
import { readFileSync } from \\"node:fs\\";
import { defineConfig, loadEnv, Plugin } from \\"vite\\";
import react from \\"@vitejs/plugin-react\\";
import tsconfigPaths from \\"vite-tsconfig-paths\\";



// https://vitejs.dev/config/
export default defineConfig(({ mode }) => {
  setEnv(mode);
  return {
    plugins: [
      react(),
      
      tsconfigPaths(),
      envPlugin(),
      devServerPlugin(),
      sourcemapPlugin(),
      buildPathPlugin(),
      basePlugin(),
      importPrefixPlugin(),
      htmlPlugin(mode),
      
    ],
  };
});

function setEnv(mode: string) {
	Object.assign(
		process.env,
		loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]),
	);
	process.env.NODE_ENV ||= mode;
	const { homepage } = JSON.parse(readFileSync(\\"package.json\\", \\"utf-8\\"));
	process.env.PUBLIC_URL ||= homepage
		? \`\${
				homepage.startsWith(\\"http\\") || homepage.startsWith(\\"/\\")
					? homepage
					: \`/\${homepage}\`
			}\`.replace(/\\\\/$/, \\"\\")
		: \\"\\";
}

// Expose \`process.env\` environment variables to your client code
// https://vitejs.dev/config/shared-options.html#define
function envPlugin(): Plugin {
  return {
    name: \\"env-plugin\\",
    config(_, { mode }) {
      const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
      return {
        define: Object.fromEntries(
          Object.entries(env).map(([key, value]) => [
            \`process.env.\${key}\`,
            JSON.stringify(value),
          ]),
        ),
      };
    },
  };
}

// https://vitejs.dev/config/server-options.html#server-https
function devServerPlugin(): Plugin {
	return {
		name: \\"dev-server-plugin\\",
		config(_, { mode }) {
			const { HOST, PORT, HTTPS, SSL_CRT_FILE, SSL_KEY_FILE } = loadEnv(
				mode,
				\\".\\",
				[\\"HOST\\", \\"PORT\\", \\"HTTPS\\", \\"SSL_CRT_FILE\\", \\"SSL_KEY_FILE\\"],
			);
			const https = HTTPS === \\"true\\";
			return {
				server: {
					host: HOST || \\"localhost\\",
					port: parseInt(PORT || \\"3000\\", 10),
					open: true,
					https:
						https && SSL_CRT_FILE && SSL_KEY_FILE
							? {
									cert: readFileSync(resolve(SSL_CRT_FILE)),
									key: readFileSync(resolve(SSL_KEY_FILE)),
							  }
							: https,
				},
			};
		},
	};
}

// https://vitejs.dev/config/build-options.html#build-sourcemap
function sourcemapPlugin(): Plugin {
	return {
		name: \\"sourcemap-plugin\\",
		config(_, { mode }) {
			const { GENERATE_SOURCEMAP } = loadEnv(mode, \\".\\", [
				\\"GENERATE_SOURCEMAP\\",
			]);
			return {
				build: {
					sourcemap: GENERATE_SOURCEMAP === \\"true\\",
				},
			};
		},
	};
}

// https://vitejs.dev/config/build-options.html#build-outdir
function buildPathPlugin(): Plugin {
	return {
		name: \\"build-path-plugin\\",
		config(_, { mode }) {
			const { BUILD_PATH } = loadEnv(mode, \\".\\", [
				\\"BUILD_PATH\\",
			]);
			return {
				build: {
					outDir: BUILD_PATH || \\"build\\",
				},
			};
		},
	};
}

// https://vitejs.dev/config/shared-options.html#base
function basePlugin(): Plugin {
	return {
		name: \\"base-plugin\\",
		config(_, { mode }) {
			const { PUBLIC_URL } = loadEnv(mode, \\".\\", [\\"PUBLIC_URL\\"]);
			return {
				base: PUBLIC_URL || \\"\\",
			};
		},
	};
}

// To resolve modules from node_modules, you can prefix paths with ~
// https://create-react-app.dev/docs/adding-a-sass-stylesheet
// https://vitejs.dev/config/shared-options.html#resolve-alias
function importPrefixPlugin(): Plugin {
	return {
		name: \\"import-prefix-plugin\\",
		config() {
			return {
				resolve: {
					alias: [{ find: /^~([^/])/, replacement: \\"$1\\" }],
				},
			};
		},
	};
}


// Replace %ENV_VARIABLES% in index.html
// https://vitejs.dev/guide/api-plugin.html#transformindexhtml
function htmlPlugin(mode: string): Plugin {
	const env = loadEnv(mode, \\".\\", [\\"REACT_APP_\\", \\"NODE_ENV\\", \\"PUBLIC_URL\\"]);
	return {
		name: \\"html-transform\\",
		transformIndexHtml: {
			enforce: \\"pre\\",
			transform(html) {
				return html.replace(/%(.*?)%/g, (match, p1) => env[p1] ?? match);
			},
		},
	};
}
"
`;
